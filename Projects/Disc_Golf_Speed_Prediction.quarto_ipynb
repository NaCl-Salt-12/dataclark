{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b4ce6dfb",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Predicting Disc Golf Speed Ratings with Machine Learning\"\n",
    "author: \"Nathaniel Clark\"\n",
    "date: \"2025-07-29\"\n",
    "format:\n",
    "  html:\n",
    "    page-layout: article\n",
    "    number-sections: false\n",
    "    code-fold: true\n",
    "    code-summary: \"Show the code\"\n",
    "    code-overflow: wrap\n",
    "    code-copy: hover\n",
    "    code-tools:\n",
    "        source: false\n",
    "        toggle: true\n",
    "        caption: See code\n",
    "execute: \n",
    "  warning: false\n",
    "---\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Disc golf, a sport that combines precision, strategy, and physics, has surged in popularity, captivating players with its blend of athleticism and technical finesse. Central to the game is the disc itself, where the speed rating—a measure of how fast a disc must be thrown to achieve its intended flight path—plays a critical role in performance. As a avid disc golfer I wondered if I could predicting a disc’s speed rating based on its physical characteristics to better inform myself on the relationship between disc and glide rating and help me select discs in the future. In this project, I utilize machine learning to predict disc golf speed ratings using a dataset of disc specifications, employing the XGBoost algorithm to uncover patterns in the data.\n",
    "\n",
    "## Objective\n",
    "\n",
    "The goal is to build a predictive model that estimates a disc’s speed rating based on its physical attributes, such as rim width, diameter, and bead presence. By engineering features like rim-to-diameter ratio and disc area, and using a robust XGBoost model, I aim to achieve accurate predictions and identify which features most influence a disc’s speed. This analysis not only showcases the power of machine learning in sports analytics but also offers practical applications for disc design and selection.\n",
    "\n",
    "## Data Preparation\n",
    "\n",
    "The dataset, found on [kaggle](https://www.kaggle.com/datasets/jakestrasler/disc-golf-disc-flight-numbers-and-dimensions), contains detailed measurements of various disc golf discs, including attributes like rim width, diameter, height, and bead presence. I used the Polars library for efficient data manipulation, dropping non-numeric flight characteristics (e.g., fade, glide, turn, stability) to focus on physical measurements and to avoid bais and lay the ground work for future models. To enrich the dataset, I engineered several features:\n",
    "\n",
    "-   **Rim ratio**: Rim width divided by diameter, capturing the proportional width of the rim.\n",
    "-   **Profile ratio**: Height divided by diameter, reflecting the disc’s vertical profile.\n",
    "-   **Rim area**: Product of rim width and rim depth, representing the rim’s surface area.\n",
    "-   **Disc area**: Calculated using the formula for the area of a circle, (\\pi \\times (\\text{diameter}/2)\\^2).\n",
    "-   **Flight plate ratio**: Inside rim diameter divided by total diameter, indicating the proportion of the disc’s flight plate.\n",
    "-   **Inside rim width-depth product**: Inside rim diameter multiplied by rim depth, capturing interaction effects.\n",
    "\n",
    "Additionally, the categorical variable “DISC TYPE” was converted to dummy variables, and the “BEAD” column was transformed into a boolean (True for “Yes,” False for “No”). These transformations ensure the dataset is suitable for machine learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "92384b2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <div id=\"XLYZZd\"></div>\n",
       "            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n",
       "                if(!window.letsPlotCallQueue) {\n",
       "                    window.letsPlotCallQueue = [];\n",
       "                }; \n",
       "                window.letsPlotCall = function(f) {\n",
       "                    window.letsPlotCallQueue.push(f);\n",
       "                };\n",
       "                (function() {\n",
       "                    var script = document.createElement(\"script\");\n",
       "                    script.type = \"text/javascript\";\n",
       "                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.6.2/js-package/distr/lets-plot.min.js\";\n",
       "                    script.onload = function() {\n",
       "                        window.letsPlotCall = function(f) {f();};\n",
       "                        window.letsPlotCallQueue.forEach(function(f) {f();});\n",
       "                        window.letsPlotCallQueue = [];\n",
       "                        \n",
       "                    };\n",
       "                    script.onerror = function(event) {\n",
       "                        window.letsPlotCall = function(f) {};    // noop\n",
       "                        window.letsPlotCallQueue = [];\n",
       "                        var div = document.createElement(\"div\");\n",
       "                        div.style.color = 'darkred';\n",
       "                        div.textContent = 'Error loading Lets-Plot JS';\n",
       "                        document.getElementById(\"XLYZZd\").appendChild(div);\n",
       "                    };\n",
       "                    var e = document.getElementById(\"XLYZZd\");\n",
       "                    e.appendChild(script);\n",
       "                })()\n",
       "            </script>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import polars as pl \n",
    "from lets_plot import *\n",
    "import numpy as np \n",
    "import polars.selectors as cs\n",
    "import sklearn\n",
    "\n",
    "LetsPlot.setup_html()\n",
    "\n",
    "df = pl.read_csv(\"disc-data.csv\", infer_schema_length=10000)\n",
    "\n",
    "df = df.drop([\"MOLD\",\"FADE\",\"GLIDE\",\"TURN\",\"STABILITY\"])\n",
    "df = df.to_dummies(\"DISC TYPE\")\n",
    "\n",
    "df = df.with_columns(\n",
    "    pl.col(\"BEAD\").replace_strict({\"No\":False, \"Yes\":True}),\n",
    "    (pl.col(\"RIM WIDTH (cm)\") / pl.col(\"DIAMETER (cm)\")).alias(\"Rim ratio\"),\n",
    "    (pl.col(\"HEIGHT (cm)\")/pl.col(\"DIAMETER (cm)\")).alias(\"profile ratio\"),\n",
    "    (pl.col(\"RIM WIDTH (cm)\")*pl.col(\"RIM DEPTH (cm)\")).alias(\"rim_area\"),\n",
    "    (np.pi*(pl.col(\"DIAMETER (cm)\")/2)**2).alias(\"disc_area\"),\n",
    "    (pl.col(\"INSIDE RIM DIAMETER (cm)\")/ pl.col(\"DIAMETER (cm)\")).alias(\"flight_plate_ratio\"),\n",
    "    (pl.col(\"INSIDE RIM DIAMETER (cm)\")*pl.col(\"RIM DEPTH (cm)\")).alias(\"inside_rwd\"),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9606449c",
   "metadata": {},
   "source": [
    "## Model Training\n",
    "\n",
    "I chose the XGBoost regressor, a powerful gradient-boosting algorithm, to predict speed ratings. The dataset was split into the standard training (70%) and testing (30%) sets to evaluate model performance. The model was configured with the following hyperparameters:\n",
    "\n",
    "-   **Booster**: DART (Dropout-meet-Additive Regression Trees) for improved generalization.\n",
    "-   **Number of estimators**: 120, balancing complexity and performance.\n",
    "-   **Learning rate (eta)**: 0.15, controlling the step size of updates.\n",
    "-   **Gamma**: 3, enforcing sparsity in splits.\n",
    "-   **Max depth**: 8, limiting tree complexity to prevent overfitting.\n",
    "-   **Rate drop**: 0.3, introducing dropout in DART to enhance robustness.\n",
    "\n",
    "The model was trained on the training set, and predictions were made on the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b75202d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=&#x27;dart&#x27;, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eta=0.15, eval_metric=None,\n",
       "             feature_types=None, feature_weights=None, gamma=3,\n",
       "             grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=120, n_jobs=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://xgboost.readthedocs.io/en/release_3.0.0/python/python_api.html#xgboost.XGBRegressor\">?<span>Documentation for XGBRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBRegressor(base_score=None, booster=&#x27;dart&#x27;, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eta=0.15, eval_metric=None,\n",
       "             feature_types=None, feature_weights=None, gamma=3,\n",
       "             grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=120, n_jobs=None, ...)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "XGBRegressor(base_score=None, booster='dart', callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eta=0.15, eval_metric=None,\n",
       "             feature_types=None, feature_weights=None, gamma=3,\n",
       "             grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=120, n_jobs=None, ...)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = df.drop(\"SPEED\")\n",
    "y = df[\"SPEED\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "model = xgb.XGBRegressor(\n",
    "    booster='dart',\n",
    "    n_estimators=120,\n",
    "    eta=0.15,\n",
    "    gamma=3,\n",
    "    max_depth=8,\n",
    "    rate_drop=0.3\n",
    ")\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70b8a3e5",
   "metadata": {},
   "source": [
    "## Model Evaluation\n",
    "\n",
    "To assess the model’s performance, I calculated several commen metrics:\n",
    "\n",
    "-   **Mean Squared Error (MSE)**: indicating the average squared difference between predicted and actual speed ratings.\n",
    "-   **Root Mean Squared Error (RMSE)**: showing the average prediction error in speed rating units.\n",
    "-   **Mean Absolute Error (MAE)**: reflecting the average absolute deviation of predictions.\n",
    "-   **R-squared (R²)**: 0.96, suggesting that 96% of the variance in speed ratings is explained by the model.\n",
    "\n",
    "These metrics indicate strong predictive performance, with the model capturing most of the variability in speed ratings while maintaining relatively low errors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "661b5984",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (4, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Metric</th><th>Result</th></tr><tr><td>str</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Mean Squared Error&quot;</td><td>0.55</td></tr><tr><td>&quot;Root Mean Squared Error&quot;</td><td>0.74</td></tr><tr><td>&quot;Mean Absolute Error&quot;</td><td>0.56</td></tr><tr><td>&quot;R-squared&quot;</td><td>0.96</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (4, 2)\n",
       "┌─────────────────────────┬────────┐\n",
       "│ Metric                  ┆ Result │\n",
       "│ ---                     ┆ ---    │\n",
       "│ str                     ┆ f64    │\n",
       "╞═════════════════════════╪════════╡\n",
       "│ Mean Squared Error      ┆ 0.55   │\n",
       "│ Root Mean Squared Error ┆ 0.74   │\n",
       "│ Mean Absolute Error     ┆ 0.56   │\n",
       "│ R-squared               ┆ 0.96   │\n",
       "└─────────────────────────┴────────┘"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| layout-align: center\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "metrics = pl.DataFrame(\n",
    "    {\n",
    "        \"Metric\": [\"Mean Squared Error\",\"Root Mean Squared Error\",\"Mean Absolute Error\",\"R-squared\"],\n",
    "        \"Result\":[mse,rmse,mae,r2]\n",
    "    }\n",
    ")\n",
    "\n",
    "metrics.select(\n",
    "    \"Metric\",\n",
    "    Result = pl.col(\"Result\").round(2)\n",
    ")\n",
    "# print(f\"Mean Squared Error: {mse:.2f}\")\n",
    "# print(f\"Root Mean Squared Error: {rmse:.2f}\")\n",
    "# print(f\"Mean Absolute Error: {mae:.2f}\")\n",
    "# print(f\"R-squared: {r2:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a08cd795",
   "metadata": {},
   "source": [
    "## Feature Importance\n",
    "\n",
    "To understand which features drive speed predictions, I extracted the gain-based feature importance from the XGBoost model. The top five features, visualized in a bar plot, reveal the key drivers of speed ratings:\n",
    "\n",
    "-   **Rim ratio**: The most influential feature, as wider rims typically correlate with higher speed ratings due to aerodynamic properties.\n",
    "-   **flight_plate_ratio**: The proportion of the flight plate relative to total diameter significantly affects speed and stability.\n",
    "-   **DISC TYPE_Putter**: Putter classification has a strong influence, as putters typically have lower speed ratings reflecting their design for control rather than distance.\n",
    "-   **DISC TYPE_Driver**: Driver classification significantly impacts speed predictions, as drivers are specifically designed for high-speed throws and distance.\n",
    "-   **RIM WIDTH (cm)**: The physical rim width measurement captures direct aerodynamic properties affecting flight dynamics.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e79b3ded",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "   <div id=\"lif8wC\"></div>\n",
       "   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n",
       "   \n",
       "   (function() {\n",
       "   // ----------\n",
       "   \n",
       "   const forceImmediateRender = false;\n",
       "   const responsive = false;\n",
       "   \n",
       "   let sizing = {\n",
       "       width_mode: \"MIN\",\n",
       "       height_mode: \"SCALED\",\n",
       "       width: null, \n",
       "       height: null \n",
       "   };\n",
       "   \n",
       "   const preferredWidth = document.body.dataset.letsPlotPreferredWidth;\n",
       "   if (preferredWidth !== undefined) {\n",
       "       sizing = {\n",
       "           width_mode: 'FIXED',\n",
       "           height_mode: 'SCALED',\n",
       "           width: parseFloat(preferredWidth)\n",
       "       };\n",
       "   }\n",
       "   \n",
       "   const containerDiv = document.getElementById(\"lif8wC\");\n",
       "   let fig = null;\n",
       "   \n",
       "   function renderPlot() {\n",
       "       if (fig === null) {\n",
       "           const plotSpec = {\n",
       "\"data\":{\n",
       "\"Feature\":[\"Rim ratio\",\"flight_plate_ratio\",\"DISC TYPE_Putt & Approach\",\"DISC TYPE_Distance Driver\",\"RIM WIDTH (cm)\"],\n",
       "\"Importance\":[462.61,231.7,162.31,55.28,31.35]\n",
       "},\n",
       "\"mapping\":{\n",
       "\"x\":\"Importance\",\n",
       "\"y\":\"Feature\",\n",
       "\"fill\":\"Feature\"\n",
       "},\n",
       "\"data_meta\":{\n",
       "\"series_annotations\":[{\n",
       "\"type\":\"str\",\n",
       "\"column\":\"Feature\"\n",
       "},{\n",
       "\"type\":\"float\",\n",
       "\"column\":\"Importance\"\n",
       "}],\n",
       "\"mapping_annotations\":[{\n",
       "\"parameters\":{\n",
       "\"label\":\"Feature\",\n",
       "\"order_by\":\"Importance\",\n",
       "\"order\":1.0\n",
       "},\n",
       "\"aes\":\"y\",\n",
       "\"annotation\":\"as_discrete\"\n",
       "}]\n",
       "},\n",
       "\"ggtitle\":{\n",
       "\"text\":\"Top Feature Importance (Gain)\"\n",
       "},\n",
       "\"guides\":{\n",
       "\"x\":{\n",
       "\"title\":\"Importance Score\"\n",
       "},\n",
       "\"fill\":\"none\"\n",
       "},\n",
       "\"theme\":{\n",
       "\"axis_title_y\":{\n",
       "\"blank\":true\n",
       "},\n",
       "\"axis_text\":{\n",
       "\"size\":12.0,\n",
       "\"blank\":false\n",
       "}\n",
       "},\n",
       "\"kind\":\"plot\",\n",
       "\"scales\":[],\n",
       "\"layers\":[{\n",
       "\"geom\":\"bar\",\n",
       "\"stat\":\"identity\",\n",
       "\"mapping\":{\n",
       "},\n",
       "\"data_meta\":{\n",
       "},\n",
       "\"orientation\":\"y\",\n",
       "\"data\":{\n",
       "}\n",
       "}],\n",
       "\"metainfo_list\":[],\n",
       "\"spec_id\":\"1\"\n",
       "};\n",
       "           window.letsPlotCall(function() { fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, containerDiv, sizing); });\n",
       "       } else {\n",
       "           fig.updateView({});\n",
       "       }\n",
       "   }\n",
       "   \n",
       "   const renderImmediately = \n",
       "       forceImmediateRender || (\n",
       "           sizing.width_mode === 'FIXED' && \n",
       "           (sizing.height_mode === 'FIXED' || sizing.height_mode === 'SCALED')\n",
       "       );\n",
       "   \n",
       "   if (renderImmediately) {\n",
       "       renderPlot();\n",
       "   }\n",
       "   \n",
       "   if (!renderImmediately || responsive) {\n",
       "       // Set up observer for initial sizing or continuous monitoring\n",
       "       var observer = new ResizeObserver(function(entries) {\n",
       "           for (let entry of entries) {\n",
       "               if (entry.contentBoxSize && \n",
       "                   entry.contentBoxSize[0].inlineSize > 0) {\n",
       "                   if (!responsive && observer) {\n",
       "                       observer.disconnect();\n",
       "                       observer = null;\n",
       "                   }\n",
       "                   renderPlot();\n",
       "                   if (!responsive) {\n",
       "                       break;\n",
       "                   }\n",
       "               }\n",
       "           }\n",
       "       });\n",
       "       \n",
       "       observer.observe(containerDiv);\n",
       "   }\n",
       "   \n",
       "   // ----------\n",
       "   })();\n",
       "   \n",
       "   </script>"
      ],
      "text/plain": [
       "<lets_plot.plot.core.PlotSpec at 0x7f12773f6e00>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importance = model.get_booster().get_score(importance_type='gain')\n",
    "importance_df = pl.DataFrame({\n",
    "    'Feature': list(importance.keys()),\n",
    "    'Importance': list(importance.values())\n",
    "}).with_columns(\n",
    "    pl.col('Importance').round(2)\n",
    ")\n",
    "importance_df = importance_df.sort(\"Importance\", descending=True).head(5)\n",
    "\n",
    "plot1 = (\n",
    "    ggplot(importance_df, aes(y=as_discrete('Feature', order_by='Importance', order=1), x='Importance', fill='Feature')) +\n",
    "    geom_bar(stat=\"identity\") +\n",
    "    labs(title=\"Top Feature Importance (Gain)\", x=\"Importance Score\") +\n",
    "    guides(fill=\"none\") +\n",
    "    theme(\n",
    "        axis_text=element_text(size=12),\n",
    "        axis_title_y=element_blank()\n",
    "    )\n",
    ")\n",
    "plot1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0e5e66b",
   "metadata": {},
   "source": [
    "## Actual vs. Predicted Speed\n",
    "\n",
    "To visualize the model’s performance, I created a scatter plot comparing actual speed ratings to predicted values, with a red dashed line representing perfect predictions (y=x). The points, plotted with slight jitter to avoid overlap, cluster closely around the line, confirming the model’s accuracy. The plot, provides a clear visual of the model’s predictive ability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f30a3118",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "   <div id=\"8zjeAC\"></div>\n",
       "   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n",
       "   \n",
       "   (function() {\n",
       "   // ----------\n",
       "   \n",
       "   const forceImmediateRender = false;\n",
       "   const responsive = false;\n",
       "   \n",
       "   let sizing = {\n",
       "       width_mode: \"MIN\",\n",
       "       height_mode: \"SCALED\",\n",
       "       width: null, \n",
       "       height: null \n",
       "   };\n",
       "   \n",
       "   const preferredWidth = document.body.dataset.letsPlotPreferredWidth;\n",
       "   if (preferredWidth !== undefined) {\n",
       "       sizing = {\n",
       "           width_mode: 'FIXED',\n",
       "           height_mode: 'SCALED',\n",
       "           width: parseFloat(preferredWidth)\n",
       "       };\n",
       "   }\n",
       "   \n",
       "   const containerDiv = document.getElementById(\"8zjeAC\");\n",
       "   let fig = null;\n",
       "   \n",
       "   function renderPlot() {\n",
       "       if (fig === null) {\n",
       "           const plotSpec = {\n",
       "\"data\":{\n",
       "\"actual\":[7.0,5.0,3.0,3.0,9.0,5.0,13.0,9.0,2.0,3.0,4.0,5.0,10.0,5.0,2.0,4.0,6.0,4.0,3.0,6.0,4.0,10.0,5.0,6.0,9.0,11.0,3.0,5.0,4.0,6.0,10.0,5.0,9.0,5.0,9.0,11.0,2.0,4.0,5.0,6.0,7.0,4.0,7.0,2.0,4.0,2.0,3.0,8.0,10.0,3.0,2.0,13.0,4.0,13.0,4.0,3.0,2.0,5.0,13.0,11.0,7.0,7.0,5.0,5.0,6.0,6.0,13.0,5.0,9.0,2.0,9.0,7.0,5.0,8.0,9.0,5.0,5.0,14.0,8.0,2.0,2.0,5.0,13.0,5.0,3.0,7.0,5.0,10.5,12.0,11.0,11.0,2.0,3.0,7.0,3.0,5.0,9.0,4.0,3.0,11.0,4.0,2.0,14.0,13.0,3.0,12.0,3.0,5.0,9.0,12.0,3.0,14.0,7.0,13.0,6.0,2.0,2.0,9.0,5.5,2.0,2.0,13.0,7.0,7.0,10.0,13.0,7.0,9.0,10.0,9.0,11.0,10.0,6.0,11.0,8.0,9.0,4.0,12.0,5.0,10.0,2.0,9.0,2.0,9.0,9.0,4.0,5.0,4.0,7.0,9.0,4.0,2.0,6.5,9.0,9.0,11.0,12.0,7.0,13.0,7.0,11.0,3.0,11.0,7.0,1.0,9.0,10.0,3.0,2.0,13.0,9.0,5.0,8.0,8.0,7.0,5.0,12.0,9.0,6.0,12.0,8.0,3.0,5.0,10.0,9.0,3.0,12.0,12.0,5.0,9.0,7.0,10.0,14.0,4.0,8.0,7.0,2.0,11.0,7.0,14.0,13.0,10.0,11.0,12.0,5.5,9.0,8.0,5.0,12.0,5.0,2.0,8.0,2.0,4.0,7.0,10.0,2.0,2.0,5.0,13.0,5.0,2.0,3.0,9.0,5.0,12.0,13.0,9.0,5.0,6.0,4.5,2.0,5.0,14.5,4.0,2.0,9.0,3.0,7.0,3.0,7.0,3.0,7.0,8.0,4.0,6.0,6.0,2.0,4.0,12.0,7.0,4.0,5.0,4.0,10.0,13.0,9.0,4.0,2.0,2.0,3.0,11.5,2.0,11.5,7.0,1.0,5.0,8.0,12.0,9.0,5.0,12.0,5.0,5.0,2.0,7.0,9.0,8.0,9.0,4.0,8.0,10.0,3.0,4.0,11.0,7.0,5.0,2.0,2.0,5.0,3.0,2.0,12.0,11.0,9.0,8.0,13.0,7.0,5.0,14.0,10.0,9.0,9.0,13.0,6.0,6.0,4.0,5.0,3.0,5.0,1.0,1.0,7.0,12.0,4.0,12.0,3.0,11.0,2.0,13.0,7.0,4.0,9.0,8.0,5.0,8.0,8.0,13.0,10.0,3.0,4.0,2.0,5.0,2.0,4.0,2.0,2.0,5.0,3.0,2.0,6.0,8.0,5.0,2.0,6.5,8.0,5.0,5.0,9.0,9.0,8.0,12.0,5.0],\n",
       "\"predicted\":[8.854506492614746,5.081350803375244,2.9797821044921875,2.727526903152466,8.854506492614746,5.0874738693237305,12.530194282531738,7.4915361404418945,2.6139626502990723,3.5477821826934814,3.1331777572631836,5.081350803375244,9.958195686340332,5.376585006713867,3.453129529953003,5.081350803375244,5.081350803375244,4.461350440979004,2.9672000408172607,6.720337390899658,5.299939155578613,8.854506492614746,5.152388095855713,7.479078769683838,8.854506492614746,10.18449878692627,2.9797821044921875,5.0874738693237305,3.9191415309906006,6.721872806549072,9.556920051574707,5.108129501342773,8.593335151672363,5.119486331939697,8.248778343200684,10.747967720031738,3.453129529953003,4.46747350692749,5.081350803375244,6.820671081542969,7.23430061340332,3.449368715286255,7.017364978790283,2.6139626502990723,5.095746994018555,3.938345432281494,2.912217855453491,9.564632415771484,9.564632415771484,2.727526903152466,2.6139626502990723,11.368224143981934,4.633530139923096,12.421279907226563,4.859411239624023,2.912217855453491,2.6139626502990723,5.119486331939697,12.421279907226563,11.507492065429688,6.668872833251953,6.738862037658691,4.859411239624023,4.859411239624023,5.294696807861328,5.119486331939697,11.089573860168457,5.081350803375244,9.539207458496094,2.727526903152466,8.491984367370605,7.485537052154541,5.081350803375244,8.652154922485352,7.873044013977051,5.066385746002197,5.081350803375244,12.530194282531738,8.854506492614746,2.727526903152466,2.727526903152466,5.29093599319458,11.745831489562988,5.0874738693237305,2.727526903152466,7.017364978790283,5.081350803375244,10.18449878692627,12.069541931152344,11.228841781616211,10.825732231140137,2.727526903152466,3.366838216781616,6.993775367736816,3.1343743801116943,5.081350803375244,9.564632415771484,3.078195095062256,2.727526903152466,8.854506492614746,4.461350440979004,3.449368715286255,12.748051643371582,12.069541931152344,2.727526903152466,11.990120887756348,2.9797821044921875,5.0874738693237305,9.424910545349121,12.29846477508545,2.727526903152466,11.089573860168457,7.448357105255127,12.466079711914063,6.092012405395508,2.727526903152466,2.6139626502990723,8.854506492614746,5.171544551849365,2.6139626502990723,2.727526903152466,12.530194282531738,6.997288703918457,6.997288703918457,9.393281936645508,10.231291770935059,7.369174957275391,8.854506492614746,9.564632415771484,8.211501121520996,11.089573860168457,9.563541412353516,4.844446182250977,8.854506492614746,8.511053085327148,8.652154922485352,3.443432331085205,12.19047737121582,5.5698041915893555,9.563541412353516,2.6139626502990723,9.556920051574707,2.727526903152466,8.253698348999023,8.854506492614746,5.081350803375244,5.451541423797607,5.081350803375244,6.649143218994141,8.319604873657227,4.461350440979004,2.912217855453491,7.567784309387207,8.652154922485352,8.753154754638672,9.8856201171875,12.069541931152344,7.176400184631348,12.421279907226563,7.295446395874023,8.854506492614746,3.1343743801116943,11.089573860168457,6.998824119567871,2.8959100246429443,8.652154922485352,9.564632415771484,3.078195095062256,2.7825088500976563,12.421279907226563,8.652154922485352,5.0874738693237305,8.054677963256836,8.854506492614746,6.997288703918457,5.119486331939697,10.747967720031738,8.753154754638672,6.71562385559082,12.069541931152344,6.334364414215088,2.727526903152466,5.081350803375244,9.571253776550293,8.854506492614746,4.131085395812988,12.130630493164063,11.507492065429688,4.633530139923096,8.854506492614746,7.378284454345703,10.5833101272583,12.29846477508545,4.594972610473633,8.652154922485352,6.671250820159912,2.6139626502990723,11.089573860168457,7.567784309387207,12.449845314025879,12.530194282531738,9.450032234191895,11.089573860168457,11.507492065429688,5.125609397888184,8.854506492614746,7.468433380126953,5.081350803375244,12.421279907226563,5.0874738693237305,2.727526903152466,7.388705730438232,2.727526903152466,4.007065296173096,7.434647560119629,9.958195686340332,3.1620290279388428,2.727526903152466,5.29093599319458,11.507492065429688,5.081350803375244,2.727526903152466,3.034764289855957,9.556920051574707,5.0874738693237305,10.825732231140137,12.29846477508545,8.854506492614746,5.252625942230225,6.864600658416748,4.924744129180908,2.727526903152466,5.510092258453369,12.748051643371582,4.723892688751221,2.727526903152466,8.854506492614746,3.938345432281494,7.168014049530029,3.366838216781616,7.437167167663574,3.1331777572631836,6.671250820159912,8.652154922485352,4.131085395812988,6.998824119567871,6.884676933288574,2.912217855453491,5.081350803375244,12.130630493164063,7.385188579559326,2.8935043811798096,5.0874738693237305,4.717769622802734,9.38556957244873,12.530194282531738,8.854506492614746,4.131085395812988,2.9672000408172607,2.727526903152466,3.1331777572631836,10.81801986694336,3.078195095062256,10.798542976379395,7.368629455566406,2.5452423095703125,5.11425256729126,7.4915361404418945,12.421279907226563,8.593335151672363,4.86553430557251,11.990120887756348,5.0874738693237305,5.081350803375244,2.5452423095703125,7.65440034866333,9.563541412353516,7.481734752655029,8.652154922485352,3.8982222080230713,6.730836391448975,9.061484336853027,2.727526903152466,5.252625942230225,11.089573860168457,7.748730182647705,5.081350803375244,2.912217855453491,2.727526903152466,5.0874738693237305,2.912217855453491,2.8662171363830566,11.089573860168457,11.228841781616211,8.511053085327148,8.010101318359375,12.29846477508545,7.104192733764648,5.0874738693237305,12.530194282531738,8.854506492614746,9.38556957244873,8.854506492614746,12.069541931152344,6.804909706115723,5.081350803375244,4.633530139923096,5.2874226570129395,2.727526903152466,5.081350803375244,2.7986528873443604,2.5452423095703125,7.522675037384033,12.069541931152344,3.0208094120025635,11.990120887756348,2.9672000408172607,11.089573860168457,3.2045199871063232,12.530194282531738,7.488056659698486,3.8982222080230713,8.611845016479492,8.854506492614746,5.108129501342773,7.375174045562744,6.738862037658691,12.748051643371582,9.571253776550293,4.108712673187256,4.632800102233887,2.5452423095703125,4.272727012634277,2.6139626502990723,2.9672000408172607,3.449368715286255,2.727526903152466,5.0874738693237305,2.912217855453491,2.912217855453491,5.2038774490356445,7.458196640014648,4.924744129180908,2.727526903152466,7.567784309387207,7.371149063110352,5.081350803375244,5.2038774490356445,8.854506492614746,8.551061630249023,7.434647560119629,12.29846477508545,5.119486331939697]\n",
       "},\n",
       "\"mapping\":{\n",
       "\"x\":\"actual\",\n",
       "\"y\":\"predicted\"\n",
       "},\n",
       "\"data_meta\":{\n",
       "\"series_annotations\":[{\n",
       "\"type\":\"float\",\n",
       "\"column\":\"actual\"\n",
       "},{\n",
       "\"type\":\"float\",\n",
       "\"column\":\"predicted\"\n",
       "}]\n",
       "},\n",
       "\"ggtitle\":{\n",
       "\"text\":\"Actual vs Predicted Speed\"\n",
       "},\n",
       "\"guides\":{\n",
       "\"x\":{\n",
       "\"title\":\"Actual Speed\"\n",
       "},\n",
       "\"y\":{\n",
       "\"title\":\"Predicted Speed\"\n",
       "}\n",
       "},\n",
       "\"kind\":\"plot\",\n",
       "\"scales\":[],\n",
       "\"layers\":[{\n",
       "\"geom\":\"point\",\n",
       "\"mapping\":{\n",
       "},\n",
       "\"position\":\"jitter\",\n",
       "\"data_meta\":{\n",
       "},\n",
       "\"color\":\"#1E90FF\",\n",
       "\"alpha\":0.5,\n",
       "\"data\":{\n",
       "}\n",
       "},{\n",
       "\"geom\":\"abline\",\n",
       "\"mapping\":{\n",
       "},\n",
       "\"data_meta\":{\n",
       "},\n",
       "\"slope\":1.0,\n",
       "\"intercept\":0.0,\n",
       "\"color\":\"red\",\n",
       "\"linetype\":\"dashed\",\n",
       "\"data\":{\n",
       "}\n",
       "}],\n",
       "\"metainfo_list\":[],\n",
       "\"spec_id\":\"2\"\n",
       "};\n",
       "           window.letsPlotCall(function() { fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, containerDiv, sizing); });\n",
       "       } else {\n",
       "           fig.updateView({});\n",
       "       }\n",
       "   }\n",
       "   \n",
       "   const renderImmediately = \n",
       "       forceImmediateRender || (\n",
       "           sizing.width_mode === 'FIXED' && \n",
       "           (sizing.height_mode === 'FIXED' || sizing.height_mode === 'SCALED')\n",
       "       );\n",
       "   \n",
       "   if (renderImmediately) {\n",
       "       renderPlot();\n",
       "   }\n",
       "   \n",
       "   if (!renderImmediately || responsive) {\n",
       "       // Set up observer for initial sizing or continuous monitoring\n",
       "       var observer = new ResizeObserver(function(entries) {\n",
       "           for (let entry of entries) {\n",
       "               if (entry.contentBoxSize && \n",
       "                   entry.contentBoxSize[0].inlineSize > 0) {\n",
       "                   if (!responsive && observer) {\n",
       "                       observer.disconnect();\n",
       "                       observer = null;\n",
       "                   }\n",
       "                   renderPlot();\n",
       "                   if (!responsive) {\n",
       "                       break;\n",
       "                   }\n",
       "               }\n",
       "           }\n",
       "       });\n",
       "       \n",
       "       observer.observe(containerDiv);\n",
       "   }\n",
       "   \n",
       "   // ----------\n",
       "   })();\n",
       "   \n",
       "   </script>"
      ],
      "text/plain": [
       "<lets_plot.plot.core.PlotSpec at 0x7f12760d09f0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chart = pl.DataFrame({\n",
    "    \"actual\": y_test,\n",
    "    \"predicted\": y_pred\n",
    "})\n",
    "\n",
    "plot2 = (\n",
    "    ggplot(chart, aes(x=\"actual\", y=\"predicted\")) +\n",
    "    geom_point(position=\"jitter\", color=\"#1E90FF\", alpha=0.5) +\n",
    "    geom_abline(slope=1, intercept=0, color=\"red\", linetype=\"dashed\") +\n",
    "    labs(x=\"Actual Speed\", y=\"Predicted Speed\", title=\"Actual vs Predicted Speed\")\n",
    ")\n",
    "plot2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3747413",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "The XGBoost model achieved an R² of 0.96, with rim ratio and related features emerging as the most influential predictors. These insights can help players select discs tailored to their throwing style. Future work could incorporate additional features, such as material properties or advanced aerodynamic metrics, to further refine predictions as well as additional models to predict the other commen metrics (i.e. Glide, Fade, Turn and Stability). This analysis underscores the intersection of data science and sports, offering a data-driven approach to understanding the physics of disc golf."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/home/nathaniel/.local/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
