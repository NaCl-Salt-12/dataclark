---
title: "Metals in Mistborn"
format: html
engine: knitr
---

## Introduction

I've always loved reading. Recently, I decided to combine this passion with data science by creating visualizations of my favorite books. After some research, I found tidytext, an R package for analyzing text, which opened up new ways to explore literature through data.

## Analyzing Metals in Mistborn

One of my favorite books is Brandon Sanderson's Mistborn: The Final Empire. In this fantasy novel, metals are the source of magical powers through a system called Allomancyâ€”people can "burn" different metals to gain special abilities.
I used R and text analysis tools to track how these metals appear throughout the story. By processing the entire book and turning the text into data, I created visualizations that reveal patterns you might not notice while reading.

What follows is both a technical walkthrough and a love letter to literature.

## Tools and Libraries

```{R}
#| code-fold: true
#| warning: False
#| echo: false
library(tidyverse) 
library(tidytext) 
library(pdftools) 
library(ggstream) 
library(ggtext) 
library(widyr)
library(ggraph)
library(igraph) 
library(sysfonts) 
library(gt)
library(kableExtra)
```

```{R}
#| code-fold: true
#| warning: False
#| echo: false

# Fonts to include in the theme
font_add(family = "Trajan Pro", regular = "../fonts/TrajanPro-Regular.ttf") 

font_add(family = "Times New Roman", regular = "../fonts/times.ttf")


# First custom theme
theme_mistborn <- function() {
  theme_void(base_family = "Trajan Pro", base_size = 20) +
  theme(
    plot.margin = margin(10, 10, 10, 10),
    legend.position = "bottom", 
    legend.direction = "horizontal",
    legend.key.height = unit(3, "mm"),
    legend.spacing.y = unit(4, "cm"),
    legend.text = element_text(size = 20),
    text = element_text(color = "white"),
    plot.title = element_text(size = 24, family = "Trajan Pro"),
    plot.subtitle = element_markdown(hjust = 0.5),
    plot.caption = element_markdown(hjust = 1),
    panel.background = element_rect(fill = "#1a0d26", color = NA),
    plot.background = element_rect(fill = "#1a0d26", color = NA)
  )
    
}

# Second Theme
theme_mist <- function() {
  theme_void(base_family = "Trajan Pro", base_size = 15) +
  theme(
    plot.margin = margin(10, 10, 10, 10),
    legend.position = "bottom", 
    legend.direction = "horizontal",
    legend.key.height = unit(3, "mm"),
    legend.spacing.y = unit(4, "cm"),
    legend.text = element_text(size = 16),
    text = element_text(color = "#E6E6E6"), 
    axis.text = element_text(angle = 45, color = "#B3B3B3"), 
    axis.title = element_markdown(color = "#E6E6E6"), 
    plot.title = element_text(color = "#FFFFFF",size = 24),
    plot.subtitle = element_markdown(color = "#D9D9D9"),
    plot.caption = element_markdown(color = "#B3B3B3", hjust = 1),
    panel.grid = element_blank(),
    panel.background = element_rect(fill = "#1a0d26", color = NA),
    plot.background = element_rect(fill = "#1a0d26", color = NA)
  )
}


metal_colors <- c(
  "Iron"   = "#708090",  
  "Steel"  = "#4682B4", 
  "Tin"    = "#C0C0C0",
  "Pewter" = "#96A0A0",
  "Brass"  = "#B5A642",
  "Zinc"   = "#7F8C8D",
  "Copper" = "#B87333",
  "Bronze" = "#CD7F32",
  "Atium"  = "purple4",
  "Gold"   = "goldenrod"
)

mistborn_colors <- c(
  "Vin" = "#6BA6CD",        
  "Kelsier" = "#E55555",    
  "Elend" = "#413f8f",     
  "Breeze" = "#E6B800",   
  "Spook" = "#B565A7",   
  "Marsh" = "#39A8B2",  
  "Sazed" = "#E67E22", 
  "Clubs" = "#A5A5A5",
  "Ham" = "#B8860B"  
)

```

The project utilizes several R libraries:

- **tidyverse**: For data manipulation and visualization.
- **tidytext**: For text processing and tokenization.
- **pdftools**: To extract text from the PDF.
- **ggstream**, **ggraph**, **igraph**: For creating stream graphs and network visualizations.
- **gt**: For styling tables.
- **widyr**: For calculating word correlations.

In addition canva was also used for formatting the final product.

## Data Extraction and Cleaning

The first challenge is getting the text out of the PDF file and preparing it for analysis.

### Reading the PDF
We begin by loading the PDF using `pdftools`:

```{R}
mistborn_text <- pdf_text("./final_empire.pdf")
```

This creates a character vector where each element is a page of the book.

### Cleaning the Text

The raw text includes unwanted elements like page headers (e.g., "mistborn 123") and footers (e.g., "123 brandon sanderson"). We split the text into lines and clean it with regular expressions:

```{R}
text_lines <- unlist(strsplit(mistborn_text, "\n")) %>%
  str_replace_all("mistborn\\s+\\d+", "") %>%
  str_replace_all("\\d+\\s+brandon sanderson", "") %>%
  str_replace_all("\n", " ") %>%
  str_replace_all("[^[:alnum:][:space:]\\.]", " ")
```

This removes headers, footers, and special characters, leaving only alphanumeric text, spaces, and periods.

### Extracting the Story

The actual story starts at "PROLOGUE" and ends before "ARS ARCANUM." We locate these markers and extract the relevant lines:

```{R}
prologue_line <- which(str_detect(text_lines, "PROLOGUE$"))
ars_arcanum_line <- which(str_detect(text_lines, "ARS ARCANUM$"))
story_lines <- text_lines[prologue_line:(ars_arcanum_line - 1)]
```

### Identifying Chapters

Chapters are marked by lines containing "PROLOGUE," "EPILOGUE," or a single number (e.g., "1"). We find these markers and assign each line to a chapter:

```{R}
chapter_markers <- which(str_detect(story_lines, "\\b\\d{1,2}\\b") |
                         str_detect(story_lines, "PROLOGUE$") |
                         str_detect(story_lines, "EPILOGUE$"))
chapter_names <- story_lines[chapter_markers]
line_chapters <- findInterval(seq_along(story_lines), chapter_markers)
chapter_labels <- chapter_names[line_chapters]
```

We also create a tibble mapping chapter names to unique IDs:

```{R}
chapter_id <- tibble(
  chapter_name = str_trim(chapter_names),
  chapter_id = seq(1, 40)
)
head(chapter_id,4) %>% kable()
```

### Structuring the Data
The cleaned text is organized into a tibble with columns for chapter name, text, line number, and chapter ID:

```{R}
df <- tibble(
  chapter = str_trim(chapter_labels),
  text = story_lines
) %>%
  group_by(chapter) %>%
  mutate(line_number = row_number()) %>%
  ungroup() %>%
  inner_join(chapter_id, join_by(chapter == chapter_name))

head(df,4) %>% kable()
```

We also extract the book's parts (e.g., "PART ONE") for use in visualizations:

```{R}
part_lines <- df %>%
  filter(str_detect(text, "^\\s+PART")) %>%
  mutate(text = str_trim(text)) %>%
  rename(part = text) %>%
  select(chapter_id, part)

part_lines %>% kable()
```

## Text Analysis

With the text structured, we analyze mentions of the Allomantic metals: iron, steel, tin, pewter, brass, zinc, copper, bronze, atium, and gold.

### Tokenizing the Text
Using `tidytext`, we break the text into individual words:

```{R}
text_df <- df %>%
  unnest_tokens(word, text)

head(text_df) %>% kable()
```

### Counting Metal Mentions
We filter for the metals and count their mentions per chapter:

```{R}
metals_list <- c("iron", "steel", "tin", "pewter", "brass", "zinc", "copper", "bronze", "atium", "gold")
metals_text <- text_df %>%
  filter(word %in% metals_list) %>%
  mutate(word = str_to_title(word)) %>%
  count(chapter_id, word, name = "mentions") %>%
  left_join(part_lines, join_by(chapter_id == chapter_id)) %>%
  fill(part)

head(metals_text,4) %>% kable()
```

This produces a dataset with each metal's mention count per chapter, linked to the book's parts.

### Stream graph
The stream graph was generated from the data above. 

```{R}
#| fig-width: 18
#| fig-height: 8

stream_graph <- ggplot() +
  # Add part divider lines
  geom_vline(
    data = part_lines,
    aes(xintercept = chapter_id),
    color = "grey50",
    linewidth = 0.2,
    linetype = 2
  ) +
  # Streamgraph layer
  geom_stream(
    data = metals_text,
    aes(x = chapter_id, y = mentions, fill = word),
    type = "mirror",
    extra_span = 0.1,
    bw = 0.55
  ) +
  # Add part labels at the bottom of the plot
  geom_text(
    data = metals_text %>%
      group_by(part) %>%
      summarize(x = min(chapter_id) + n_distinct(chapter_id) / 2),
    aes(x, y = -Inf, label = part),
    vjust = -1,
    hjust = 0.5,
    color = "grey60",
    family = "Trajan Pro",
    size = 5
  ) +
  # Custom fill scale for metals
  scale_fill_manual(values = metal_colors) +
  labs(
    fill = "Metal",
    subtitle = "Distribution of mentions share (number of words)<br>
    per metal in each chapter. Parts are separated with vertical lines."
  ) +
  # Apply custom theme
  theme_mistborn()

stream_graph
```

Each metal is a colored stream, with vertical lines marking the book's parts. This highlights shifts in focus, like a spike in "atium" mentions during key plot moments.

### Bar Plot
A bar plot displays total mentions for each metal:

```{R}
# Summarize metal mention counts and reorder factors
plot_data <- metals_text %>% 
  group_by(word) %>% 
  summarise(total_mentions = sum(mentions)) %>% 
  arrange(desc(total_mentions)) %>% 
  mutate(word = fct_reorder(word, total_mentions))

# Create horizontal bar plot
bar_plot <- plot_data %>% 
  ggplot(aes(x = word, y = total_mentions, fill = word)) +
  # Bar geometry
  geom_col() +
  # Custom fill colors
  scale_fill_manual(values = metal_colors) +
  # Remove legend
  guides(fill = "none") +
  # Labels
  labs(y = "Number of Mentions") +
  # Allow labels to extend past plot area
  coord_cartesian(clip = "off") +
  # Text labels above bars
  geom_text(
    aes(label = total_mentions), 
    color = "grey70",
    hjust = 0.5,
    vjust = -0.4,
    size = 7.5,
    family = "Trajan Pro"
  ) +
  # Apply custom theme
  theme_mist() +
  # Additional theme tweaks
  theme(
    axis.text.y = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = 18, angle = 90)
  )

bar_plot

```


### Exploring Word Correlations
To see how metals are used in context, we calculate correlations between words appearing together. We flatten the text, split it into sentences, group sentences into sections of ten, and compute pairwise correlations for words appearing at least 20 times:

```{R}
mist_section <- str_flatten(story_lines, collapse = " ") %>%
  as_tibble() %>%
  unnest_sentences(sentence, value) %>%
  mutate(section = row_number() %/% 10) %>%
  unnest_tokens(word, sentence) %>%
  filter(!word %in% stop_words$word)

word_cors <- mist_section %>%
  group_by(word) %>%
  filter(n() >= 20) %>%
  pairwise_cor(word, section, sort = TRUE) %>%
  filter(item1 %in% metals_list)

head(word_cors,4) %>% kable()
```

This reveals which words are frequently associated with each metal.

### Network Graph

```{R}
#| warning: False

# Set seed for reproducible layout
set.seed(2000)

# Filter word correlations and create graph
graph <- word_cors %>% 
  filter(correlation > 0.15) %>%
  graph_from_data_frame()

# Compute node degrees and tag metals
V(graph)$degree <- degree(graph)
V(graph)$is_metal <- V(graph)$name %in% metals_list  # Boolean for coloring nodes

# Create network graph with conditional styling
network_Graph <- graph %>%
  ggraph(layout = "fr") +
  # Draw edges with thickness and transparency based on correlation
  geom_edge_link(
    aes(edge_alpha = correlation, edge_width = correlation), 
    color = "grey40",
    show.legend = FALSE
  ) +
  # Draw nodes with size by degree and color by is_metal
  geom_node_point(
    aes(size = degree, color = is_metal)
  ) +
  # Custom colors for metal vs non-metal nodes
  scale_color_manual(
    values = c("FALSE" = "#ff79c6", "TRUE" = "lightblue")
  ) +
  # Add labels with soft background
  geom_node_label(
    aes(label = name),
    color = "grey95",
    fill = "#4D267380",
    repel = TRUE,
    force = 1,
    force_pull = 0.1,
    family = "Trajan Pro",
    label.size = 0,
    size = 3.5
  ) +
  # Control node size range
  scale_size_continuous(range = c(3, 10)) +
  # Remove legends
  guides(size = "none", color = "none") +
  # Apply custom theme
  theme_mistborn()

network_Graph
```

Metals (in light blue) connect to related terms (in pink), showing contextâ€”like "steel" linking to "push."

Due to a desire for brevity I left some of the code out, to see the entire code you can view it on my [github](https://github.com/NaCl-Salt-12/BookDataVisualization/blob/main/Mistborn/Metals_clean.R).

## Conclusion

Throughout this project, I gained valuable experience and enjoyed the journey of exploration and experimentation. I tried numerous approaches and visualization options before settling on my final choices, and I'm quite pleased with how everything turned out.

## Poster
The final image was creating using canva to format and style it.
![Mistborn Poster](https://raw.githubusercontent.com/NaCl-Salt-12/BookDataVisualization/refs/heads/main/Mistborn/images/metals_mistborn_poster.png)
