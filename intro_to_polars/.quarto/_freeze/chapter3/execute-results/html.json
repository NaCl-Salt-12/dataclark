{
  "hash": "b6c0988e8653238a21a823ae97f5b8ef",
  "result": {
    "engine": "jupyter",
    "markdown": "# Dataframes and Series \n\n## Data types\n\nPolars allows you to store data in a varity of formats called data types. These data types fall generally into the following categorties:\n\n- **Numeric**: Signed integers, unsigned integers, floating point numbers, and decimals\n- **Nested**: Lists, structs, and arrays for handling complex data\n- **Temporal**: Dates, datetimes,and times for working with time-based data\n- **Miscellaneous**: Strings, binary data, Booleans, categoricals, enums, and objects\n\nThe most common data types you will be working with are generally: Strings, signed and unsigned integers, floating point numbers or floats, decimals, dates or datatimes and booleans. For more information on each of these data types see @sec-appendix-a.\n\n## Series\n\nThe two most common data structures in Polars are DataFrames and Series. Series are one-dimensional data structures where all elements share the same datatype. Think of a Series as a single column in a table - it’s essentially a named array of data.\n\nCreating a Series is straightforward with the following syntax:\n\n`pl.Series(name, values_list)`\n\nWhere \"name\" is the label for your Series and \"values_list\" contains the data. Here's a simple example:\n\n::: {#273fa7f3 .cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\ns = pl.Series(\"example\", [1, 2, 3, 4, 5])\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>example</th></tr><tr><td>i64</td></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>5</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWhen you create a series Polars will infer the data type for the values you provide. So in the above example I gave it [1, 2, 3, 4, 5] and it set the datatype to Int64 if instead gave it [1, 2, 3, 4.0, 5] it would asume it is Float64.\n\n::: {#bb8d24db .cell execution_count=2}\n``` {.python .cell-code}\ns2 = pl.Series(\"payment\", [132.50, 120, 116, 98.75 ,42])\ns2\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>payment</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>132.5</td></tr><tr><td>120.0</td></tr><tr><td>116.0</td></tr><tr><td>98.75</td></tr><tr><td>42.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#25d58e47 .cell execution_count=3}\n``` {.python .cell-code}\ns3 = pl.Series(\"mixed\", [1, \"text\", True, 3.14], strict=False)\n# series.dytpe outputs a the data type of the series\nprint(f\"Mixed series type: {s3.dtype}\")\ns3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMixed series type: String\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (4,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>mixed</th></tr><tr><td>str</td></tr></thead><tbody><tr><td>&quot;1&quot;</td></tr><tr><td>&quot;text&quot;</td></tr><tr><td>&quot;true&quot;</td></tr><tr><td>&quot;3.14&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nYou can set the data type of the series as well by using the `dtype` parameter. A example use case is when storing a id number the id number should be stored as a string not a int due to the fact that we we do not want to perform mathmatical operations on the identification number therefore it is best stored as a string.\n\n::: {#adad3e12 .cell execution_count=4}\n``` {.python .cell-code}\n# strict=False allows automatic conversion from different data types\ns3 = pl.Series(\"id number\", [143823, 194203, 553420, 234325, 236532], dtype=pl.Utf8, strict=False)\ns3\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id number</th></tr><tr><td>str</td></tr></thead><tbody><tr><td>&quot;143823&quot;</td></tr><tr><td>&quot;194203&quot;</td></tr><tr><td>&quot;553420&quot;</td></tr><tr><td>&quot;234325&quot;</td></tr><tr><td>&quot;236532&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Dataframes\n\nDataFrames are tabular data structures (rows and columns) composed of multiple Series, with each column representing a single Series. The design of a dataframe is called schema. A schema is a mapping of column to the data types. \n\nDataframes are the workhorses of data analysis and what you’ll use most frequently.\n\nWith DataFrames, you can write powerful queries to filter, transform, aggregate, and reshape your data efficiently.\n\nDataFrames can be created in several ways:\n\n1. From a dictionary of sequences (lists, arrays)\n2. With explicit schema specification \n3. From a sequence of (name, dtype) pairs\n4. From NumPy arrays\n5. From a list of lists (row-oriented data)\n6. By converting pandas DataFrames\n7. By importing existing tabular data from CSVs, JSON, SQL, Parquet files, etc.\n\nIn real-world environments, you’ll typically work with preexisting data, though understanding various creation methods is valuable. We’ll cover data import techniques later, but for now, here’s an example of a DataFrame created from a dictionary of lists:\n\n::: {#87416e0f .cell execution_count=5}\n``` {.python .cell-code}\n# Create a DataFrame from a dictionary of lists\ndf = pl.DataFrame({\n    \"name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n    \"age\": [25, 30, 35, 40],\n    \"city\": [\"New York\", \"Boston\", \"Chicago\", \"Seattle\"],\n    \"salary\": [75000, 85000, 90000, 95000]\n})\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (4, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>age</th><th>city</th><th>salary</th></tr><tr><td>str</td><td>i64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Alice&quot;</td><td>25</td><td>&quot;New York&quot;</td><td>75000</td></tr><tr><td>&quot;Bob&quot;</td><td>30</td><td>&quot;Boston&quot;</td><td>85000</td></tr><tr><td>&quot;Charlie&quot;</td><td>35</td><td>&quot;Chicago&quot;</td><td>90000</td></tr><tr><td>&quot;David&quot;</td><td>40</td><td>&quot;Seattle&quot;</td><td>95000</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nevery data frame has a shape. the shape is the number of rows and columns in a dataframe \n`shape(rows,columns)`\n\nthe shape for the above dataframe is:\n\n::: {#9b324f12 .cell execution_count=6}\n``` {.python .cell-code}\nprint(df.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(4, 4)\n```\n:::\n:::\n\n\nyou can view the schema of any dataframe with the following command \n\n::: {#ad1d6283 .cell execution_count=7}\n``` {.python .cell-code}\nprint(df.schema)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSchema({'name': String, 'age': Int64, 'city': String, 'salary': Int64})\n```\n:::\n:::\n\n\nWe see here that the schema is returned as a dictionary. In the above example the column name has the string datatype. Though you can view the data type already when displaying the dataframe.\n\n## Inspecting Dataframes\n\nIn polars there are a varity of ways to inspect a dataframe, all of which have different use cases. The ones that we will be covering right now are:\n\n- head \n- tail \n- glimpse\n- sample\n- describe\n- slice\n\n### head \n\nthe `head` functions allows you to view the first x rows of the dataframe. By default the number of rows it shows is 5, though you can specify the number of rows to view.\n\n```python\ndataframe.head(n)\n```\nWhere n is the number of rows to return if you give it a negative number it will turn all rows except the last n rows.\n\n::: {#284cb8b7 .cell execution_count=8}\n``` {.python .cell-code}\nimport numpy as np\n\n# Create NumPy arrays for sandwich data\nsandwich_names = np.array(['BLT', 'Club', 'Tuna', 'Ham & Cheese', 'Veggie'])\nprices = np.array([8.99, 10.50, 7.50, 6.99, 6.50])\ncalories = np.array([550, 720, 480, 520, 320])\nvegetarian = np.array([False, False, False, False, True])\n\n# Create DataFrame from NumPy arrays\nsandwich_df = pl.DataFrame({\n    \"sandwich\": sandwich_names,\n    \"price\": prices,\n    \"calories\": calories,\n    \"vegetarian\": vegetarian\n})\n\n\nsandwich_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>sandwich</th><th>price</th><th>calories</th><th>vegetarian</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>bool</td></tr></thead><tbody><tr><td>&quot;BLT&quot;</td><td>8.99</td><td>550</td><td>false</td></tr><tr><td>&quot;Club&quot;</td><td>10.5</td><td>720</td><td>false</td></tr><tr><td>&quot;Tuna&quot;</td><td>7.5</td><td>480</td><td>false</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### tail\n\nThe `tail` function is esentailly the inverse of head. It allows you to view the last n rows of the dataframe. The default for tail is also five rows.\n\n",
    "supporting": [
      "chapter3_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}