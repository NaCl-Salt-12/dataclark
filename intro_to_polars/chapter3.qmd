# Dataframes and Series 

## Data types

Polars allows you to store data in a varity of formats called data types. These data types fall generally into the following categorties:

- **Numeric**: Signed integers, unsigned integers, floating point numbers, and decimals
- **Nested**: Lists, structs, and arrays for handling complex data
- **Temporal**: Dates, datetimes,and times for working with time-based data
- **Miscellaneous**: Strings, binary data, Booleans, categoricals, enums, and objects

The most common data types you will be working with are generally: Strings, signed and unsigned integers, floating point numbers or floats, decimals, dates or datatimes and booleans. For more information on each of these data types see @sec-appendix-a.

## Series

The two most common data structures in Polars are DataFrames and Series. Series are one-dimensional data structures where all elements share the same datatype. Think of a Series as a single column in a table - itâ€™s essentially a named array of data.

Creating a Series is straightforward with the following syntax:

`pl.Series(name, values_list)`

Where "name" is the label for your Series and "values_list" contains the data. Here's a simple example:
```{python}
import polars as pl
s = pl.Series("example", [1, 2, 3, 4, 5])
s
```

When you create a series Polars will infer the data type for the values you provide. So in the above example I gave it [1, 2, 3, 4, 5] and it set the datatype to Int64 if instead gave it [1, 2, 3, 4.0, 5] it would asume it is Float64.


```{python}
s2 = pl.Series("payment", [132.50, 120, 116, 98.75 ,42])
s2
```

You can set the data type of the series as well by using the dtype parameter. A example use case is when storing a id number the id number should be stored as a string not a int due to the fact that we we do not want to perform mathmatical operations on the identification number therfore it is best stored as a string.


```{python}
# strict=False allows automatic conversion from integers to strings
s3 = pl.Series("id number", [143823, 194203, 553420, 234325, 236532], dtype=pl.String, strict=False)
s3
```

